swagger: '2.0'
info:
  description: This is a simple API for managing a TODO List
  version: 1.0.0
  title: Simple ToDo API
  # put the contact info for your development or API team
  contact:
    email: recruiting@dfsco.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
- name: todo
  description: "Doing the things that need to be done"
paths:
  /lists:
    get:
      tags:
      - todo
      summary: returns all of the available lists
      operationId: searchLists
      description: |
        Searches the todo lists that are available
      produces:
      - application/json
      parameters:
      - in: query
        name: searchString
        description: pass an optional search string for looking up a list
        required: false
        type: string
      - in: query
        name: skip
        description: number of records to skip for pagination
        type: integer
        format: int32
        minimum: 0
      - in: query
        name: limit
        description: maximum number of records to return
        type: integer
        format: int32
        minimum: 0
        maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/TodoList'
        400:
          description: bad input parameter
    post:
      tags:
      - todo
      summary: creates a new list
      operationId: addList
      description: Adds a list to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: todoList
        description: ToDo list to add
        schema:
          $ref: '#/definitions/TodoList'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  /list/{id}:
    get:
      tags:
      - todo
      summary: return the specified todo list
      operationId: getList
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: The unique identifier of the list
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/TodoList'
        400:
          description: Invalid id supplied
        404:
          description: List not found
  /list/{id}/tasks:
    post:
      tags:
      - todo
      summary: add a new task to the todo list
      operationId: addTask
      produces: 
      - application/json
      parameters:
      - name: id
        in: path
        description: Unique identifier of the list to add the task for
        required: true
        type: string
        format: uuid
      - in: body
        name: task
        description: task to add
        schema:
          $ref: '#/definitions/Task'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  /list/{id}/task/{taskId}/complete:
    post:
      tags:
      - todo
      summary: updates the completed state of a task
      operationId: putTask
      produces: 
      - application/json
      parameters:
      - name: id
        in: path
        description: Unique identifier of the list to add the task for
        required: true
        type: string
        format: uuid
      - name: taskId
        in: path
        description: Unique identifier task to complete
        required: true
        type: string
        format: uuid
      - in: body
        name: task
        description: task to add
        schema:
          $ref: '#/definitions/CompletedTask'
      responses:
        201:
          description: item updated
        400:
          description: invalid input, object invalid
definitions:
  TodoList:
    type: object
    required:
    - id
    - name
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      name:
        type: string
        example: Home
      description:
        type: string
        example: |
          The list of things that need to be done at home
      tasks:
        type: array
        items:
          $ref: '#/definitions/Task'
  Task:
    required:
    - id
    - name
    properties:
      id:
        type: string
        format: uuid
        example: 0e2ac84f-f723-4f24-878b-44e63e7ae580
      name:
        type: string
        example: "mow the yard"
      completed:
        type: boolean
        default: false
        example: true
  CompletedTask:
    required:
    - completed
    properties:
      completed:
        type: boolean
        default: false
        example: true
# Added by API Auto Mocking Plugin
# host: recruiting.dfsco.com
# basePath: /todo
schemes:
 - https
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /steelbottle/todo/v1

